import java.util.*;
import java.io.*;
import java.math.*;

public class Solution{
    
    static class Reader
    {
        final private int BUFFER_SIZE = 1 << 25;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;
 
        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public String readLine() throws IOException 
        { 
            byte[] buf = new byte[1280000]; // line length 
            int cnt = 0, c; 
            while ((c = read()) != -1) 
            { 
                if (c == '\n') 
                    break; 
                buf[cnt++] = (byte) c; 
            } 
            return new String(buf, 0, cnt); 
        } 
        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            }  while ((c = read()) >= '0' && c <= '9');
 
            if (neg)
                return -ret;
            return ret;
        }
        public long nextLong() throws IOException 
        { 
            long ret = 0; 
            byte c = read(); 
            while (c <= ' ') 
                c = read(); 
            boolean neg = (c == '-'); 
            if (neg) 
                c = read(); 
            do { 
                ret = ret * 10 + c - '0'; 
            } 
            while ((c = read()) >= '0' && c <= '9'); 
            if (neg) 
                return -ret; 
            return ret; 
        } 
    }

    static HashMap<Long, Integer> map;
    public static void main(String[] argh) throws Exception{
        Reader br = new Reader();
        int n= br.nextInt();
        long[] arr= new long[n];
        StringBuilder sb= new StringBuilder();
        map= new HashMap<>();
        for(int i=0; i<n; i++){
            arr[i]= br.nextLong();
            if(arr[i] == (long)1){
                sb.append("NO");
                if(i != n-1) sb.append("\n");
                continue;
            }
            if(map.containsKey(arr[i])){
                sb.append("YES");
                if(i != n-1) sb.append("\n");
                continue;
            }
            double res= (double)Math.sqrt(arr[i]);
            if(Math.floor(res) == res) {
                if(isPrime((long)res)){
                    map.put(arr[i], 1);
                    sb.append("YES");
                }
                else
                    sb.append("NO");
            }
            else sb.append("NO");
            if(i != n-1) sb.append("\n");
        }
        System.out.print(sb);
    }
    
    private static boolean isPrime(long n){
        for(int i=2; i<=Math.sqrt(n); i++){
            if(n%i == 0){
                return false;
            }
        }
        return true;
    }
}
